@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix schema: <http://schema.org/> .
@prefix riskman: <https://w3id.org/riskman/ontology#> .
@prefix rlevel: <https://w3id.org/riskman/ontology#> .
@prefix : <https://w3id.org/riskman/shapes#> .



:AnalyzedRiskShape
  a sh:NodeShape ;
  sh:targetClass riskman:AnalyzedRisk ;
  sh:property [
    sh:path riskman:hasDomainSpecificHazard ;
    sh:message "Every analyzed risk must have exactly one domain specific hazard." ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ], [
    sh:path riskman:hasHarm ;
    sh:message "Every analyzed risk must have exactly one harm." ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ], [
    sh:path riskman:hasDeviceContext ;
    sh:message "Every analyzed risk must have exactly one device context." ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ], [
    sh:path riskman:hasHazardousSituation ;
    sh:message "Every analyzed risk must have exactly one hazardous situation." ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ], [
    sh:path riskman:hasInitialRiskLevel ;
    sh:message "Every analyzed risk must have exactly one pre-risk level." ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ]
.  

:AssuranceSDAShape
  a sh:NodeShape ;
  sh:targetClass riskman:AssuranceSDA ;
  sh:property [ 
      sh:path riskman:hasSafetyAssurance ;
      sh:minCount 1 ;
      sh:maxCount 1 ;
  ], [
      sh:path riskman:hasSubSDA  ;
      sh:message "SubSDAs of an AssuranceSDA must again be AssuranceSDAs." ;
      sh:class riskman:AssuranceSDA ;
  ]
.

:DomainSpecificHazardShape
  a sh:NodeShape ;
  sh:targetClass riskman:DomainSpecificHazard ;
  sh:property [
    sh:path riskman:hasDeviceComponent ;	
    sh:message "Domain specific hazard must have exactly one device component" ;
    sh:minCount 1 ;
    sh:maxCount 1 ; 
  ], [
    sh:path riskman:hasDeviceFunction ;
    sh:message "Domain specific hazard must have exactly one device function" ;
    sh:minCount 1 ;
    sh:maxCount 1 ; 
  ], [
    sh:path riskman:hasHazard ;
    sh:message "Domain specific hazard must have exactly one hazard" ;
    sh:minCount 1 ;
    sh:maxCount 1 ; 
  ]
.

:ControlledRiskShape
  a sh:NodeShape ;
  sh:targetClass riskman:ControlledRisk ;
  sh:property [
    sh:path riskman:isMitigatedBy ;
    sh:message "Every controlled risk must be mitigated by an SDA." ;  
    sh:minCount 1 ;
    sh:maxCount 1
  ], [
    sh:path riskman:hasAnalyzedRisk ;
    sh:message "Every controlled risk must have exactly one analyzed risk." ;  
    sh:minCount 1 ;
    sh:maxCount 1 
  ], [
    sh:path riskman:hasResidualRiskLevel ;
    sh:message "Every controlled risk must have exactly one residual risk level" ;  
    sh:minCount 1 ;
    sh:maxCount 1 ;
  ] 
.

:RiskLevelShape
  a sh:NodeShape ;
  sh:targetClass riskman:RiskLevel ;
  sh:property [
    sh:path riskman:hasProbability ;	
    sh:message "Risk level must have exactly one probability value. In case of specifying all 3 probabilities (P, P1 and P2) check if P=P1xP2." ;
    sh:minCount 1 ;
    sh:maxCount 1 ; 
  ], [
    sh:path riskman:hasSeverity ;
    sh:message "Risk level must have exactly one severity value." ;
    sh:minCount 1 ;
    sh:maxCount 1 ; 
  ]
.

:SDAShape
  a sh:NodeShape ;
  sh:targetClass riskman:SDA ;
  sh:property [
      sh:path [ sh:zeroOrMorePath riskman:hasSubSDA ]  ;
      sh:message "Every SDA needs a final mitigation (which has the Implementation Manifest)" ;
      sh:qualifiedValueShape [ sh:class riskman:SDAI ];     
      sh:qualifiedMinCount 1 ;
    ]
.

:NonIncreasingProbabilityShape a sh:NodeShape;
    sh:targetClass riskman:ControlledRisk;
    sh:property [ 
        sh:path ( riskman:hasAnalyzedRisk riskman:hasInitialRiskLevel riskman:hasProbability [ sh:inversePath rlevel:gt ] [sh:inversePath riskman:hasProbability ]); 
        sh:disjoint  riskman:hasResidualRiskLevel ; 
        sh:message "Residual probability should not be higher than initial probability."
    ]
. 

:NonIncreasingProbability1Shape a sh:NodeShape;
    sh:targetClass riskman:ControlledRisk;
    sh:property [ 
        sh:path ( riskman:hasAnalyzedRisk riskman:hasInitialRiskLevel riskman:hasProbability1 [ sh:inversePath rlevel:gt ] [sh:inversePath riskman:hasProbability1 ]); 
        sh:disjoint  riskman:hasResidualRiskLevel ; 
        sh:message "Residual probability 1 should not be higher than initial probability 1."
    ]
. 

:NonIncreasingProbability2Shape a sh:NodeShape;
    sh:targetClass riskman:ControlledRisk;
    sh:property [ 
        sh:path ( riskman:hasAnalyzedRisk riskman:hasInitialRiskLevel riskman:hasProbability2 [ sh:inversePath rlevel:gt ] [sh:inversePath riskman:hasProbability2 ]); 
        sh:disjoint  riskman:hasResidualRiskLevel ; 
        sh:message "Residual probability 2 should not be higher than initial probability 2."
    ]
. 

:NonIncreasingSeverityShape a sh:NodeShape;
    sh:targetClass riskman:ControlledRisk;
    sh:property [ 
        sh:path ( riskman:hasAnalyzedRisk riskman:hasInitialRiskLevel riskman:hasSeverity [ sh:inversePath rlevel:gt ] [sh:inversePath riskman:hasSeverity ]); 
        sh:disjoint  riskman:hasResidualRiskLevel ; 
        sh:message "Residual severity should not be higher than initial severity."
    ]
. 